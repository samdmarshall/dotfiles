#!/usr/bin/env python3

# =======
# Imports
# =======

import os
import sys
import random
import shutil
import typing
from pathlib import Path
from datetime import datetime

import parse
import orgparse
#import pygit2

# =========
# Constants
# =========

T = typing.TypeVar("T")

# =========
# Functions
# =========

def one(l: typing.Sequence[T]) -> T:
    result = None
    if len(l) > 0:
        result = random.choice(l)
    return result

def find_root_git_repo(file: Path) -> Path:
    result = file.resolve()
    parents = [p for p in result.parents]
    for parent in reversed(parents):
        git_repo = parent.joinpath(".git/")
        if git_repo.exists() and git_repo.is_dir():
            result = parent
            break
    return result

def main(args: list) -> int:
    exit_code = 0

    arguments_count = len(sys.argv)

    commit_msg_file = Path(".git/COMMIT_EDITMSG")

    if arguments_count == 1:
        print("  ERROR: Not enough arguments found!")
        exit_code = 1
    else:
        if arguments_count >= 2:
            commit_msg_file = Path(sys.argv[1])

    if exit_code != 0:
        return exit_code


    commit_org_file = orgparse.load(commit_msg_file)

    origin_address = ""
    branch = ""
    repo_path = ""

    author = ""
    email = ""

    timestamp = ""

    summary = []

    root_lines = commit_org_file.root.body.splitlines()
    for line in root_lines:
        if line.startswith("#+title: "):
            elements = parse.parse("#+title: {origin} @ {branch} -> {workdir} ", line)
            origin_address = elements['origin']
            branch = elements['branch']
            repo_path = Path(elements['workdir'])
        if line.startswith("#+date: "):
            elements = parse.parse("#+date: <{timestamp}> ", line)
            timestamp = elements['timestamp']
        if line.startswith("#+author: "):
            elements = parse.parse("#+author: {author} ", line)
            author = elements['author']
        if line.startswith("#+email: "):
            elements = parse.parse("#+email: {email} ", line)
            email = elements['email']
        if not line.startswith("#+"):
            if len(line) > 0:
                summary.append(line)

    orgfiles_directory = Path(os.environ.get("ORGFILES_DIR", "~/Docuemnts/Orgfiles/")).resolve()
    if not orgfiles_directory.exists():
        orgfiles_directory.mkdir(parents=True)

    #print(orgfiles_directory)
    orgfiles_gitcommits_dir = orgfiles_directory.joinpath("git-commits/")
    if not orgfiles_gitcommits_dir.exists():
        orgfiles_gitcommits_dir.mkdir()

    #print(orgfiles_gitcommits_dir)
    encoded_origin = origin_address.replace(os.sep, "_")
    orgfiles_remote_dir = orgfiles_gitcommits_dir.joinpath(encoded_origin)
    if not orgfiles_remote_dir.exists():
        orgfiles_remote_dir.mkdir()

    #print(orgfiles_remote_dir)
    encoded_branch = branch.replace(os.sep, "_")
    orgfiles_branch_dir = orgfiles_remote_dir.joinpath(encoded_branch)
    if not orgfiles_branch_dir.exists():
        orgfiles_branch_dir.mkdir()

    #print(orgfiles_branch_dir)
    commit_orgfile = "{}.org".format(timestamp)
    orgfiles_commit_file = orgfiles_branch_dir.joinpath(commit_orgfile)

    #print(orgfiles_commit_file)
    shutil.copy2(commit_msg_file, orgfiles_commit_file)
    print("  Saving commit to: {}".format( orgfiles_commit_file ))

    commits_index_orgfile = orgfiles_directory.joinpath("commits.org")
    print("  Updating {} index...".format( commits_index_orgfile ))
    fd = open(commits_index_orgfile, 'a')
    with fd:
        fd.write("* <{}> [[file:./git-commits/{}/{}/{}][{}]] :{}: ".format( timestamp, encoded_origin, encoded_branch, commit_orgfile, ". ".join(summary), repo_path.name ) + "\n")
    fd.close()

    exit_code = 0
#    repo_path = find_root_git_repo(Path.cwd())
#    repo = pygit2.Repository(repo_path)

#    origin_address = one( [remote.url for remote in repo.remotes if remote.name == "origin"] )
#    if origin_address is None:
#        origin_address = "<origin>"
#    active_branch = one( [branch for branch in list(repo.branches) if repo.branches[branch].is_head()] )

#    today = datetime.now()
#    timestamp = today.strftime("<%Y-%m-%d %a %H:%M>")

    return exit_code

# ===========
# Entry Point
# ===========

if __name__ == "__main__":
   result = main(sys.argv)
   sys.exit(result)
