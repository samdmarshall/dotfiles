#!/usr/bin/env python3

# =======
# Imports
# =======

import io
import os
import sys
import random
import typing
from datetime import datetime
from pathlib import Path
from subprocess import check_output

import pygit2

# =========
# Constants
# =========

T = typing.TypeVar("T")

# =========
# Functions
# =========

def one(l: typing.Sequence[T]) -> T:
    result = None
    if len(l) > 0:
        result = random.choice(l)
    return result

def find_root_git_repo(file: Path) -> Path:
    result = file.resolve()
    parents = [p for p in result.parents]
    for parent in reversed(parents):
        git_repo = parent.joinpath(".git/")
        if git_repo.exists() and git_repo.is_dir():
            result = parent
            break
    return result

def resolve_tag(tag_identifier: str) -> str:
    lookup = {
        'A': ":added:",
        'M': ":modified:",
        'D': ":deleted:",
        'R': ":renamed:",
        'C': ":copied:",
        'I': ":ignored:",
        '?': ":untracked:",
        'T': ":typechange:",
        'X': ":unreadable:",
        ' ': "",
    }
    return lookup[tag_identifier]

def writeline(fd: io.TextIOWrapper, fmt: str):
    fd.write(fmt + "\n")

def main() -> int:
    exit_code = 0

    arguments_count = len(sys.argv)

    # Hook Arguments
    commit_msg_file = Path(".git/COMMIT_EDITMSG")
    commit_source = ""
    commit_sha = ""

    if arguments_count == 1:
        print("  ERROR: Not enough arguments found!")
        exit_code = 1
    else:
        if arguments_count >= 2:
            commit_msg_file = Path(sys.argv[1])
            if arguments_count == 3:
                commit_source = str(sys.argv[2])
            if arguments_count == 4:
                commit_sha = str(sys.argv[3])
        else:
            exit_code = 1


    # this is the path we are in
    repo_path = find_root_git_repo(Path.cwd())

    # ensure
    if exit_code != 0:
        return exit_code

    repo = pygit2.Repository(repo_path)
    origin_address = one( [remote.url for remote in repo.remotes if remote.name == "origin"] )
    if origin_address is None:
        origin_address = "<origin>"
    active_branch = one( [branch for branch in list(repo.branches) if repo.branches[branch].is_head()] )

    today = datetime.now()
    timestamp = today.strftime("<%Y-%m-%d %a %H:%M:%S>")

    commit = None
    head = "HEAD"

    if commit_source == "template":
        # Using `-t|--template` or the config option `commit.template` exists
        print("  Filling file from template...")
    if commit_source == "message":
        # Using `-m|--message` or `-F|--file`
        print("  Using specified message or file...")
    if commit_source == "merge":
        # If generating merge commit, or `.git/MERGE_MSG` exists
        print("  Generating merge commit...")
    if commit_source == "squash":
        # If generating squash commit, or `.git/SQUASH_MSG` exists
        print("  Generating squash commit...")
    if commit_source == "commit":
        # Using `-c|--reedit-message`, `-C|--reuse-message`, or `--amend`
        print("  Modifying existing commit message...")
        commit = commit_sha
    if commit_source == "":
        # No message or template specified, this is a regular commit
        print("  Generating commit message...")

    staged_files = dict()

    diff = repo.diff(a=head, b=commit, cached=True)
    for delta in diff.deltas:
        path = delta.new_file.path
        if path != delta.old_file.path:
            path = "{} => {}".format( delta.old_file.path, path )
        status = delta.status_char()
        #print("  Staged file: {} : {}".format( path, status ))
        staged_files[path] = status

#    diff_output = check_output(["git", "--no-pager", "diff", "--cached", "--name-status"]).decode("utf-8").strip()
#    commit_diff = dict([diff_line.split('\t')[::-1] for diff_line in diff_output.splitlines()])

    fd = open(commit_msg_file, 'a')
    with fd:
        fd.write("#+title: {} @ {} -> {} ".format( origin_address, active_branch, repo.workdir ) + "\n")
        fd.write("#+author: {} ".format( repo.config["user.name"] ) + "\n")
        fd.write("#+email: {} ".format( repo.config["user.email"] ) + "\n")
        fd.write("#+date: {} ".format( timestamp ) + "\n")

        fd.write("#+tags: added(A) modified(M) deleted(D) renamed(R) copied(C) ignored(I) untracked(?) typechange(T) unreadable(X) " + "\n")
        fd.write("#+startup: showeverything " + "\n")

        fd.write("<summary> " + "\n")
        fd.write("\n")

        for name, status in staged_files.items():
            fd.write("* {} {} ".format( name, resolve_tag(status) ) + "\n")
            fd.write("  - " + "\n")

    fd.close()

    return exit_code
# ===========
# Entry Point
# ===========

if __name__ == "__main__":
    result = main()
    sys.exit(result)

