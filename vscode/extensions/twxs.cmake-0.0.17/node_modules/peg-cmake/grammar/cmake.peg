/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Nicolas Martin. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
 
 /*
 * This is a PEG.js grammar for CMake language 
 */
{
// temporary variables used for brackets_arguments
   var bracket_open_size = 0
   var bracket_close_size = 0;

   function size_need(list) {
    var size =  list.reduce(function(cur, prev){ return cur.Length + prev ;}, 0);
    return size;
   }
   // given a list of list return a flatten array
   function flatten(list) {
      var result = new Array(1 + list[2].length), i;
      result[0] = list[1][0];
      for (i = 0; i < list[2].length; i++) {
        result[i+1] = list[2][i];
      }
      return result.join('');
   }
}
/* Source Files
 * file         ::=  file_element*
 * file_element ::=  command_invocation line_ending |
 *                   command_invocation (bracket_comment|space)* line_ending
 * line_ending  ::=  line_comment? newline
 * space        ::=  <match '[ \t]+'>
 * newline      ::=  <match '\n'>
 */
 
 file = elts:(file_element*) {return elts.reduce(function(p, c){return p.concat(c);},[]);}
 
 file_element = 
      first:(statement?) brackets:(bracket_comment_or_space*) eol:line_ending 
      { 
        var a = first?[first]:[];
        var result =brackets.reduce(function(p, c){return p.concat(c);}, a);
        result.push(eol);
        return result;
      }
 
 bracket_comment_or_space = bracket_comment / space
 
 line_ending = first:(line_comment?) second:newline 
    {
    var result = first?first:second
    return result;
    }

 space = [\ \t]
 
 newline = ('\r\n' / [\n\r] ) {
  return {
    location: location(),
    type:"newline"
  }
 }
 
 statement = 
    command_invocation 
    / if_statement
    / function_statement
    / macro_statement
    / foreach_statement
    / while_statement
 
/*
 * Command Invocations
 * A command invocation is a name followed by paren-enclosed arguments separated by whitespace:
 * 
 * command_invocation  ::=  space* identifier space* '(' arguments ')'
 * identifier          ::=  <match '[A-Za-z_][A-Za-z0-9_]*'>
 * arguments           ::=  argument? separated_arguments*
 * separated_arguments ::=  separation+ argument? |
 *                          separation* '(' arguments ')'
 * separation          ::=  space | line_ending
 */
 
command_invocation = space* name:identifier space* '(' args:arguments ')' 
{ return {
    location: location(),
    type: "command_invocation", 
    identifier: name,
    arguments: args 
  }
} 

identifier = !reserved_word first:[A-Za-z_](second:[A-Za-z0-9_]*) 
    { 
    return {
       location:location(),
       type:"identifier",
       value: first + second.join('') 
    }
    }

arguments = first:argument? others:(separated_arguments*) {
    if (!first) {
        return others.reduce( function(p, c){return p.concat(c);}, []);
    }else {
        return others.reduce( function(p, c){return p.concat(c);}, [first]);
    }
  }

separated_arguments = 
      sep:(separation+) arg:(argument?)  { 
      sep = sep.filter((e)=>{return e !== null});
      if(arg)
      sep.push(arg);
      return sep;
     }
    / sep:(separation*) '(' args:(arguments?) ')' {
      sep = sep.filter((e)=>{return e !== null});
      if (args !== null) {
        sep.push(args);
      }
      return sep;      
    }

separation = sp:(space) {return null;}
/ comment:bracket_comment {
return comment;
}
/ eol:(line_ending) {
  if(eol)
    return eol;
  else
   return null;
}
/*
 * Command Arguments
 * There are three types of arguments within Command Invocations:
 * 
 * argument ::=  bracket_argument | quoted_argument | unquoted_argument 
 */

argument = bracket_argument / quoted_argument / unquoted_argument

/*
 * Bracket Argument
 * 
 * A bracket argument, inspired by Lua long bracket syntax, encloses content between opening and closing “brackets” of the same length:
 * 
 * bracket_argument ::=  bracket_open bracket_content bracket_close
 * bracket_open     ::=  '[' '='{len} '['
 * bracket_content  ::=  <any text not containing a bracket_close
 *                        of the same {len} as the bracket_open>
 * bracket_close    ::=  ']' '='{len} ']'
 */


bracket_argument = bracket_open value:bracket_content {
  return {
  location:location(),
  type: "bracket_argument", 
  value:value.join(''),
  len:bracket_open_size
  }}
bracket_open = '[' s:('='*) '[' {
	bracket_open_size = s.length
  }

bracket_content = 
	bracket_close &{ return bracket_open_size == bracket_close_size} {return []}  
  / c:. then:bracket_content {
      return [c].concat(then);    
    }

bracket_close = ']' s:('='*) ']' {bracket_close_size = s.length}


/* Quoted Argument
 * 
 * A quoted argument encloses content between opening and closing double-quote characters:
 * 
 * quoted_argument     ::=  '"' quoted_element* '"'
 * quoted_element      ::=  <any character except '\' or '"'> |
 *                          escape_sequence |
 *                          quoted_continuation
 * quoted_continuation ::=  '\' newline
 */ 
 
/* quoted_argument = '"' quoted_element* '"'*/
quoted_argument = '"' value:(quoted_element*) '"'  {
  return {
    location: location(),
    type: "quoted_argument", 
    value: value.join('')
  }
}
 
 quoted_element =  
      [^"\\] 
    / escape_sequence 
    / quoted_continuation
 
 quoted_continuation = '\\' newline
 
/* Unquoted Argument
 * An unquoted argument is not enclosed by any quoting syntax. It may not contain any whitespace, (, ), #, ", or \ except when escaped by a backslash:
 * 
 * unquoted_argument ::=  unquoted_element+ | unquoted_legacy
 * unquoted_element  ::=  <any character except whitespace or one of '()#"\'> |
 *                        escape_sequence
 */
unquoted_argument_remainder = value:(unquoted_element / quoted_argument) {
  if(typeof(value) === "string")
    return value;
  else 
    return '"' + value.value + '"';
}
unquoted_argument = first:unquoted_element values:(unquoted_argument_remainder*) {
  return {
    location:location(),
    v:values,
    type: "unquoted_argument", 
    value:first+values.join('')
  }
} 
unquoted_element = [^()#"\\\ \t\r\n] / escape_sequence

/* Escape Sequences
 * An escape sequence is a \ followed by one character:
 * 
 * escape_sequence  ::=  escape_identity | escape_encoded | escape_semicolon
 * escape_identity  ::=  '\(' | '\)' | '\#' | '\"' | '\ ' |
 *                       '\\' | '\$' | '\@' | '\^'
 * escape_encoded   ::=  '\t' | '\r' | '\n'
 * escape_semicolon ::=  '\;' 
 */
escape_sequence = escape_identity / escape_encoded / escape_semicolon
escape_identity = '\\' [()#" \\$@^]
escape_encoded  = '\\r' / '\\n' / '\\t' // [trn]
escape_semicolon = '\\;'

/* Bracket Comment
 *
 * A # immediately followed by a Bracket Argument forms a bracket comment consisting of the entire bracket enclosure:
 *
 * bracket_comment ::=  '#' bracket_argument 
 */

bracket_comment = '#' arg:bracket_argument {
  return {
    location: location(),
    type: "bracket_comment",
    value: arg.value,
    len: arg.len  
  }
}

/* Line Comment
 * 
 * A # not immediately followed by a Bracket Argument forms a line comment that runs until the end of the line:
 * 
 * line_comment ::=  '#' <any text not starting in a bracket_argument
 *                        and not containing a newline>
 */
line_comment = '#' value:([^\n\r]*) 
    { return {
      location: location(),
      type: "line_comment", 
      value:value.join('')
    } 
  }
    

/* Conditional Blocks
 * The if()/elseif()/else()/endif() commands delimit code blocks to be executed conditionally.
 */
 
 reserved_word = 
     'if'
   / 'else'
   / 'elseif'
   / 'endif'
   / 'function'
   / 'endfunction'
   / 'macro'
   / 'endmacro'
   / 'foreach'
   / 'endforeach'
   / 'while'
   / 'endwhile'
   
 if_statement =    
    space* 'if' space* '(' pred:arguments ')'
      body:(file_element*)
    __elseif: (
    space* 'elseif' space* '(' arguments ')'
      (file_element*)
    )+
    __else:(space* 'else' space* '(' arguments ')'
      (file_element*))?
    space* 'endif' space* '(' arguments ')'  {
      return {
        location: location(),
        type: "if", 
        predicate: pred, 
        body: body.reduce(function(c, p){return c.concat(p)}, []),
        elseif: __elseif.map((array)=>{
          return {
            location: location(),
            predicate : array[4],
            body : array[6].reduce(function(c, p){return c.concat(p)}, [])
          }
        }),        
        "else":__else?{
              location: location(),
              predicate: __else[4],
              body:__else[6].reduce(function(c, p){return c.concat(p)}, [])
            }:null
      }
    }
        
    /
    space* 'if' space* '(' pred:arguments ')'
      body:(file_element*)
    __else:(
    space* 'else' space* '(' arguments ')'
      (file_element*)
    )?
    space* 'endif' space* '(' arguments ')'  {
        return {
            location: location(),
            type:"if", 
            predicate:pred, 
            body:body.reduce(function(c, p){return c.concat(p)}, []),
            else:__else?{
              location:location(),
              predicate : __else[4],
              body:__else[6].reduce(function(c, p){return c.concat(p)}, [])
            }:null
        };
    }

function_statement = 
    space* 'function' space* '(' name:identifier args:arguments ')'
      body:(file_element*)
    space* 'endfunction' space* '('arguments ')' 
    { return {
      location: location(),
      type: "function", 
      identifier: name,
      arguments:args, 
        body:body.reduce(function(c, p){return c.concat(p)}, []) } }
    
macro_statement = 
    space* 'macro' space* '(' name:identifier args:arguments ')'
      body:(file_element*)
    space* 'endmacro' space* '('arguments ')' 
    { return {
      location: location(),
      type: "macro",
      identifier: name, 
      arguments:args, 
      body:body.reduce(function(c, p){return p.concat(c)}, []) } }

foreach_statement = 
    space* 'foreach' space* '(' args:arguments ')'
      body:(file_element*)
    space* 'endforeach' space* '('arguments ')' 
    { return {
      location: location(),
      type: "foreach", 
      arguments:args, 
      body:body.reduce(function(c, p){return p.concat(c)}, []) 
    } 
  }

while_statement = 
    space* 'while' space* '(' args:arguments ')'
      body:(file_element*)
    space* 'endwhile' space* '(' arguments ')' 
    { return {
      location: location(),
      type: "while", 
      arguments:args, 
      body:body.reduce(function(c, p){return p.concat(c)}, []) 
    } 
  }
  